public class TokenHelper
{
    private readonly GraphServiceClientWrapperSettings config;

    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="configuration">Configuration.</param>
    public TokenHelper(GraphServiceClientWrapperSettings config)
    {
        this.config = config;
        this.config.AuthorityUrl = @$"https://login.microsoftonline.com/{this.config.TenantId}";
    }

    /// <summary>
    /// Create JWT token for GraphAPI.
    /// Create JWT GraphAPI Token.
    /// </summary>
    /// <returns>Bearer token for GraphAPI.</returns>
    public async Task<string> CreateJwtGraphAPITokenAsync()
    {
        var confidentialClientApplicationBuilder = ConfidentialClientApplicationBuilder
            .Create(this.config.ClientId)
            .WithAuthority(this.config.AuthorityUrl)
            .WithClientSecret(this.config.ClientSecret);

        if (!string.IsNullOrEmpty(this.config.ClientId))
        {
            confidentialClientApplicationBuilder.WithClientId(this.config.ClientId);
        }

        var app = confidentialClientApplicationBuilder.Build();

        string[] scopes = { "https://graph.microsoft.com/.default" };
        var authenticationResult = await app.AcquireTokenForClient(scopes).ExecuteAsync();

        return authenticationResult.AccessToken;
    }
}

Program.cs
var graphSvcClientWrapperConfig = new GraphServiceClientWrapperSettings
{
    TenantId = graphSvcClientWrapperConfigSection["TenantId"]!,
    ClientId = graphSvcClientWrapperConfigSection["ClientId"]!,
    ClientSecret = builder.Configuration["AzureAD:ClientSecret"]!,
};
builder.Services.AddSingleton<GraphServiceClient>(pr => {
    TokenHelper tokenHelper = new(graphSvcClientWrapperConfig);
    var provider = new TokenProvider
    {
        Token = await tokenHelper.CreateJwtGraphAPITokenAsync()
    };

    var authenticationProvider = new BaseBearerTokenAuthenticationProvider(provider);
    return new GraphServiceClient(authenticationProvider);
});

public class TokenProvider : IAccessTokenProvider
{
    /// <summary>
    /// Gets or sets token.
    /// </summary>
    public string? Token { get; set; }

    /// <summary>
    /// Gets allowed hosts validator.
    /// </summary>
    public AllowedHostsValidator AllowedHostsValidator { get; }

    /// <summary>
    /// Gets authorization token.
    /// </summary>
    /// <param name="uri">Uri.</param>
    /// <param name="additionalAuthenticationContext">Additional authentication context.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>Token.</returns>
    public Task<string> GetAuthorizationTokenAsync(Uri uri, Dictionary<string, object>? additionalAuthenticationContext = null, CancellationToken cancellationToken = default) => Task.FromResult(this.Token);
}
